{"remainingRequest":"/Users/anubz/Documents/Ativadores/ativador fetch carrosell modal - cópia 6/node_modules/babel-loader/lib/index.js!/Users/anubz/Documents/Ativadores/ativador fetch carrosell modal - cópia 6/node_modules/vue-loader/lib/selector.js?type=script&index=0!/Users/anubz/Documents/Ativadores/ativador fetch carrosell modal - cópia 6/src/components/comps/Nots.vue","dependencies":[{"path":"/Users/anubz/Documents/Ativadores/ativador fetch carrosell modal - cópia 6/src/components/comps/Nots.vue","mtime":1525451051201},{"path":"/Users/anubz/Documents/Ativadores/ativador fetch carrosell modal - cópia 6/package.json","mtime":1525457060655},{"path":"/Users/anubz/Documents/Ativadores/ativador fetch carrosell modal - cópia 6/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/anubz/Documents/Ativadores/ativador fetch carrosell modal - cópia 6/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Users/anubz/Documents/Ativadores/ativador fetch carrosell modal - cópia 6/node_modules/vue-loader/lib/selector.js","mtime":1520395331000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from 'vue';\nvar Notifications = {\n  template: \"<div class='controls'>\" + \"<h1>Vue Notifications</h1>\" + \"<p>Select a pre-made notification</p>\" + \"<button class='success' @click='makeNotification(testSuccess)'>Success</button>\" + \"<button class='error' @click='makeNotification(testError)'>Error</button>\" + \"<button class='warning' @click='makeNotification(testWarning)'>Warning</button>\" + \"<p>-OR- <br> Make one here</p>\" + \"<div class='new-message-wrapper'>\" + \"<div class='select'><select id='newNotificationType' v-model='newNotification.type'>\" + \"<option selected='selected' disabled value='disabled'>Select a type</option>\" + \"<option v-for='option in notificationTypes' value='{{ option }}'>{{ option | capitalize }}</option>\" + \"</select></div>\" + \"<input v-model='newNotification.title' value='{{ newNotification.title }}' placeholder='Give it a title'/>\" + \"<input v-model='newNotification.message' value='{{ newNotification.message }}' placeholder='Whats the message?'/>\" + \"<button @click='createNewNotification()'>Create New Message</button>\" + \"</div>\" + //\"<pre>{{ newNotification | json }}</pre>\" + \n  //\"<pre>{{ notificationData | json }}</pre>\" + \n  \"</div>\" + \"<div class='notification-wrapper'>\" + \"<div class='notification' v-for='notification in notificationData' track-by='$index' v-bind:class='notification.type'>\" + \"<i @click='closeNotification($index)' class='fa fa-times close'></i>\" + \"<h2>{{ notification.title }}</h2>\" + \"<p>{{ notification.message }}</p>\" + \"</div>\" + \"</div>\"\n};\nvar Comp1 = {\n  ready: function ready() {\n    this.makeNotification(this.testSuccess);\n  },\n  props: [\"notificationData\"],\n  methods: {\n    createNewNotification: function createNewNotification() {\n      //soft validation\n      //first check to see if the selected type is disabled\n      if (this.newNotification.type === \"disabled\") {\n        return;\n        die;\n      } //then check for any empty fields\n      //doubt anything will be undefined, but just in case, yo.\n\n\n      for (var i in this.newNotification) {\n        if (this.newNotification[i] == \"\" || this.newNotification[i] == \"undefined\") {\n          return;\n          die;\n        }\n      } //else if it passed soft validation, go on\n      //save current message\n\n\n      var newMessage = JSON.parse(JSON.stringify(this.newNotification)); //make 'er\n\n      this.makeNotification(newMessage); //empty the object after we save the message\n\n      for (var i in this.newNotification) {\n        this.newNotification[i] = \"\";\n      } //since we reset the values above, we have to wait until the next tick\n      //to change the select value\n\n\n      Vue.nextTick(function () {\n        document.getElementById('newNotificationType').selectedIndex = \"0\";\n      });\n    },\n    makeNotification: function makeNotification(sentData) {\n      this.notificationData.push(sentData);\n    },\n    closeNotification: function closeNotification(sentNotificationIndex) {\n      //idk why, but $remove \"syntax sugar\" method doesnt work\n      //gotta schmack it out old school\n      this.notificationData.splice(sentNotificationIndex, 1);\n    }\n  },\n  data: function data() {\n    return {\n      template: Notifications.template,\n      notificationTypes: [\"warning\", \"error\", \"success\"],\n      selectedNotificationType: 'success',\n      testSuccess: {\n        type: \"success\",\n        title: \"Noice, bro!\",\n        message: \"This is a success message. Must've done something right. Hooray!\"\n      },\n      testError: {\n        type: \"error\",\n        title: \"Aw, darn.\",\n        message: \"This is an error message. Assumingly, something went wrong. Sadface.\"\n      },\n      testWarning: {\n        type: \"warning\",\n        title: \"Hey, guess what?\",\n        message: \"This is a warning message. Some info comin' at ya. Meh.\"\n      },\n      newNotification: {\n        type: \"\",\n        title: \"\",\n        message: \"\"\n      }\n    };\n  },\n  render: function render(createElement, context) {\n    return createElement('div', {\n      attrs: {\n        id: 'Igor'\n      }\n    }, [this.template]);\n  } //----------\n  // Vue init\n  //----------\n\n  /*var vue = new Vue({\n    el: \"#vue\",\n  \n    //putting the notification data in the parent Vue instance\n    //this allows other components to access and see them\n    //that means we can also push new notifications to it,\n    //and our notifications component will pick them up\n    data: {\n      notificationData: []\n    }\n  });*/\n\n};\nexport default {\n  name: 'Nots',\n\n  /**\n   * Props the parent can use to manipulate this component.\n   * Note: Components themselves should not mutate their own props.\n   */\n  data: function data() {\n    return {\n      notificationData: []\n    };\n  },\n  components: {\n    'notifications': Comp1\n  }\n};",{"version":3,"sources":["Nots.vue"],"names":[],"mappings":";;;;;;;;;AAUA,gBACA;;uCAEA,+BACA,0CACA,oFACA,8EACA,oFACA,mCACA,sCACA,yFACA,iFACA,wGACA,oBACA,+GACA,sHACA,yEACA,WACA;AACA;AACA,UAlBA,GAmBA,uCACA,2HACA,yEACA,sCACA,sCACA,WACA;;AACA;0BAEA;+BACA;AAIA;UAEA;;;AAGA;AACA;oDACA;AACA;AACA;AAEA,OAPA,CAQA;AACA;;;0CACA;qFACA;AACA;AACA;AACA;AACA,QAEA;AACA;;;sDAEA,mBACA;;4BAEA,aACA;;0CACA;kCACA;AAEA,QACA;AACA;;;+BACA;uEACA;AACA;AAEA;0DACA;iCACA;AAEA;yEACA;AACA;AACA;0DACA;AACA,AAEA;AA/CA;wBAgDA;;8BAEA;yBACA,CACA,WACA,SACA,AAEA;gCAEA;;cAEA;eACA;iBACA,AAEA;AALA;;cAOA;eACA;iBACA,AAEA;AALA;;cAOA;eACA;iBACA,AAEA;AALA;;cAOA;eACA;iBACA,AACA,AACA;AALA;AA5BA;AAkCA;kDACA;;;YAGA;AAFA;aAKA;AACA,IAEA;AACA;AACA;;AACA,AACA,AAEA,AACA,AACA,AACA,AACA,AACA,AACA,AACA;;;;;;;;;;;;AAnHA;AAoHA;QAEA;;AACA,AACA,AACA,AAEA;;;;wBACA;;wBACA,AACA;;AACA;;qBAGA,AACA;;AAdA","file":"Nots.vue","sourceRoot":"src/components/comps","sourcesContent":["<template>\n\n<div id=\"notifications\">\n  <notifications :notification-data=\"notificationData\"></notifications>\n  \n</div>\n\n</template>\n\n<script>\nimport Vue from 'vue'\n    var Notifications = {template: \"<div class='controls'>\" +\n  \"<h1>Vue Notifications</h1>\" +\n  \"<p>Select a pre-made notification</p>\" +\n  \"<button class='success' @click='makeNotification(testSuccess)'>Success</button>\" +\n  \"<button class='error' @click='makeNotification(testError)'>Error</button>\" +\n  \"<button class='warning' @click='makeNotification(testWarning)'>Warning</button>\" + \n  \"<p>-OR- <br> Make one here</p>\" +\n  \"<div class='new-message-wrapper'>\" +\n  \"<div class='select'><select id='newNotificationType' v-model='newNotification.type'>\" +\n  \"<option selected='selected' disabled value='disabled'>Select a type</option>\" +\n  \"<option v-for='option in notificationTypes' value='{{ option }}'>{{ option | capitalize }}</option>\" +\n  \"</select></div>\" +\n  \"<input v-model='newNotification.title' value='{{ newNotification.title }}' placeholder='Give it a title'/>\" + \n  \"<input v-model='newNotification.message' value='{{ newNotification.message }}' placeholder='Whats the message?'/>\" +\n  \"<button @click='createNewNotification()'>Create New Message</button>\" +\n  \"</div>\" + \n  //\"<pre>{{ newNotification | json }}</pre>\" + \n  //\"<pre>{{ notificationData | json }}</pre>\" + \n  \"</div>\" + \n  \"<div class='notification-wrapper'>\" +\n  \"<div class='notification' v-for='notification in notificationData' track-by='$index' v-bind:class='notification.type'>\" + \n  \"<i @click='closeNotification($index)' class='fa fa-times close'></i>\" +\n  \"<h2>{{ notification.title }}</h2>\" +\n  \"<p>{{ notification.message }}</p>\" +\n  \"</div>\" +\n  \"</div>\"\n  ,};\nvar Comp1 = {\n  ready: function() {\n    this.makeNotification(this.testSuccess);\n  },\n\n  \n\n  props: [\"notificationData\"],\n\n  methods: {\n    createNewNotification: function() {\n      //soft validation\n      //first check to see if the selected type is disabled\n      if(this.newNotification.type === \"disabled\") {\n        return;\n        die;\n      }\n\n      //then check for any empty fields\n      //doubt anything will be undefined, but just in case, yo.\n      for (var i in this.newNotification) {\n        if(this.newNotification[i] == \"\" || this.newNotification[i] == \"undefined\") {\n          return;\n          die;\n        }\n      }\n      //else if it passed soft validation, go on\n\n      //save current message\n      var newMessage = JSON.parse(JSON.stringify(this.newNotification));\n\n      //make 'er\n      this.makeNotification(newMessage);\n\n      //empty the object after we save the message\n      for (var i in this.newNotification) {\n        this.newNotification[i] = \"\"\n      }\n\n      //since we reset the values above, we have to wait until the next tick\n      //to change the select value\n      Vue.nextTick(function () {\n        document.getElementById('newNotificationType').selectedIndex = \"0\";\n      })\n    },\n\n    makeNotification: function(sentData) {\n      this.notificationData.push(sentData);\n    },\n\n    closeNotification(sentNotificationIndex) {\n      //idk why, but $remove \"syntax sugar\" method doesnt work\n      //gotta schmack it out old school\n      this.notificationData.splice(sentNotificationIndex, 1);\n    }    \n  },\n\n  data() {\n    return {\n      template: Notifications.template,  \n      notificationTypes: [\n        \"warning\",\n        \"error\",\n        \"success\"\n      ],\n\n      selectedNotificationType: 'success',\n\n      testSuccess: {\n        type: \"success\",\n        title: \"Noice, bro!\",\n        message: \"This is a success message. Must've done something right. Hooray!\"\n      },\n\n      testError: {\n        type: \"error\",\n        title: \"Aw, darn.\",\n        message: \"This is an error message. Assumingly, something went wrong. Sadface.\"\n      },\n\n      testWarning: {\n        type: \"warning\",\n        title: \"Hey, guess what?\",\n        message: \"This is a warning message. Some info comin' at ya. Meh.\"\n      },\n\n      newNotification: {\n        type: \"\",\n        title: \"\",\n        message: \"\"\n      }\n    }\n  },\n    render: function (createElement, context) {\n        return createElement('div',{attrs: {\n        id: 'Igor',\n            \n      }},[this.template])\n \n        \n    }\n}\n\n//----------\n// Vue init\n//----------\n/*var vue = new Vue({\n  el: \"#vue\",\n\n  //putting the notification data in the parent Vue instance\n  //this allows other components to access and see them\n  //that means we can also push new notifications to it,\n  //and our notifications component will pick them up\n  data: {\n    notificationData: []\n  }\n});*/\nexport default {\n  name: 'Nots',\n  /**\n   * Props the parent can use to manipulate this component.\n   * Note: Components themselves should not mutate their own props.\n   */\n\n  data () {\n    return { notificationData: []\n    }\n  },\n  components: {'notifications': Comp1,\n               \n               \n  }\n}\n</script>\n\n<style lang=\"scss\" scoped=\"true\">\n\n\n@import url(https://fonts.googleapis.com/css?family=Open+Sans);\n@import url(https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css);\n\n$error: #ea0000;\n$success: #7ad03a;\n$warning: #ffba00;\n\n* {\n  box-sizing: border-box;\n  font-family: \"Open Sans\";\n}\n\np {\n  margin-bottom: 0;\n}\n\n@keyframes openUp {\n  0% {\n    transform: translateY(-50%) scale(0);\n    opacity: 0;\n  }\n  100% {\n    transform: translateY(0%) scale(1);\n    opacity: 1;\n  }\n}\n.controls {\n  margin: 0 auto;\n  text-align: center;\n\n  input, select {\n    font-size: 16px;\n    margin: 0.4em;\n    padding: 0.6em 1em;\n    appearance: none;\n    border: 4px solid black;\n    border-radius: 5px;\n  }\n\n  .select {\n    position: relative;\n    display: inline-block;\n\n    select {\n      padding-right: 2em;\n      cursor: pointer;\n    }\n\n    &:after {\n      $arrow-size: 0.4em;\n\n      \n      content: '';\n      width: 0;\n      height: 0;\n      position: absolute;\n      top: 55%;\n      right: 1em;\n      border-left: $arrow-size solid transparent;\n      border-right: $arrow-size solid transparent;\n      border-bottom: $arrow-size solid transparent;\n      border-top: $arrow-size solid black;\n      transform: translateY(-50%);\n      user-select: none;\n      pointer-events: none;\n    }\n  }\n\n  button {\n    position: relative;\n    display: inline-block;\n    margin: 0.4em;\n    padding: 0.6em 1em;\n    background: #fefefe;\n    cursor: pointer;\n    user-select: none;\n    appearance: none;\n    overflow: hidden;\n    z-index: 1;\n    transition: all 0.1s;\n    font-size: 16px;\n    font-weight: bold;\n    border: 4px solid black;\n    border-radius: 0.4em;\n    box-shadow: 0 1px 1px 0 rgba(0,0,0,.15);\n\n    &:hover:after {\n      background: black;\n      color: white;\n    }\n\n    &:after {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      transform: translateX(-100%);\n      transition: all 0.1s;\n      z-index: -1;\n    }\n\n    &:hover {\n      color: white;\n      box-shadow: 0 1px 1px 0 rgba(0,0,0,.5);\n\n      &:after {\n        transform: translate(0%);\n      }\n    }\n\n    &.error {\n      border: 4px solid $error;\n\n      &:after {\n        background: $error;\n      }\n    }\n\n    &.success {\n      border: 4px solid $success;\n\n      &:after {\n        background: $success;\n      }\n    }\n\n    &.warning {\n      border: 4px solid $warning;\n\n      &:after {\n        background: $warning;\n      }\n    }\n  }\n}\n\n.notification-wrapper {\n  //if we want them fixed on the bottom and centered\n  // position: absolute;\n  // bottom: 0;\n  // left: 0;\n  // left: 50%;\n  // transform: translateX(-50%);\n  \n  max-width: 1200px;\n  margin: 0 auto;\n  margin-top: 1em;\n\n  .notification {\n    position: relative;\n    margin: 0.5em;\n    padding: 0.5em 2em 0.5em 0.5em;\n    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.25);\n    border-left: 4px solid #fff;\n    background: #fff;\n    animation: openUp 0.1s;\n\n    h2, p {\n      margin: 0;\n    }\n    \n    h2 {\n      margin-bottom: 0.25em;\n    }\n\n    .close {\n      position: absolute;\n      top: 0.5em;\n      right: 0.5em;\n      cursor: pointer;\n    }\n\n    &.error {\n      border-left: 4px solid $error;\n    }\n\n    &.success {\n      border-left: 4px solid $success;\n    }\n\n    &.warning {\n      border-left: 4px solid $warning;\n    }\n  }\n}\n\n\n\n\n\n\n\n</style>"]}]}